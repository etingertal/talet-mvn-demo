pipeline {
    agent any
    environment {
        CRED_ID = 'talet-ob-artifactory'
        ARTIFACTORY_SERVER_ID = 'platform-us.prod.gcp.devopsacc.team'
        ARTIFACTORY_DEPLOYER_RELEASE_REPO = 'talet-maven-virtual'
        ARTIFACTORY_DEPLOYER_SNAPSHOT_REPO = 'talet-maven-virtual'
        ARTIFACTORY_RESOLVER_RELEASE_REPO = 'talet-maven-virtual'
        ARTIFACTORY_RESOLVER_SNAPSHOT_REPO = 'talet-maven-virtual'
//        ARTIFACTORY_DOCKER_REGISTRY = '35.207.143.222:8082/onboard-docker-repo-virt'
        MAVEN_HOME = '/usr/share/maven' // Need to define maven home of the docker image
    }
    stages {
        stage ('Maven container config') {
            agent {
                docker {
                    reuseNode true
                    image 'maven:3.6.3-adoptopenjdk-11'
                    args '-v /root/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker'
                }
            }
            stages {
                stage ('Artifactory configuration') {
                    steps {
                        rtMavenDeployer(
                                id: "MAVEN_DEPLOYER",
                                serverId: env.ARTIFACTORY_SERVER_ID,
                                releaseRepo: env.ARTIFACTORY_DEPLOYER_RELEASE_REPO,
                                snapshotRepo: env.ARTIFACTORY_DEPLOYER_SNAPSHOT_REPO
                        )

                        rtMavenResolver(
                                id: "MAVEN_RESOLVER",
                                serverId: env.ARTIFACTORY_SERVER_ID,
                                releaseRepo: env.ARTIFACTORY_RESOLVER_RELEASE_REPO,
                                snapshotRepo: env.ARTIFACTORY_RESOLVER_SNAPSHOT_REPO
                        )
                    }
                }
                stage('Build') {
                    steps {
                        rtMavenRun (
                                pom: 'pom.xml',
                                goals: '-B -DskipTests clean package',
                                deployerId: "MAVEN_DEPLOYER",
                                resolverId: "MAVEN_RESOLVER"
                        )
                    }
                }
//                stage('Unit Test') {
//                    steps {
//                        rtMavenRun (
//                                pom: 'pom.xml',
//                                goals: 'test',
//                                deployerId: "MAVEN_DEPLOYER",
//                                resolverId: "MAVEN_RESOLVER"
//                        )
//                    }
//                    post {
//                        always {
//                            junit 'target/surefire-reports/*.xml'
//                        }
//                    }
//                }
            }
        }
//        stage('Build Docker Image') {
//            steps {
//                script {
//                    docker.build(env.ARTIFACTORY_DOCKER_REGISTRY + '/onboard-talet-maven:' + env.BUILD_NUMBER) // Keep in mind about VM's IP
//                }
//            }
//        }
//        stage('Push Docker Image') {
//            steps {
//                rtDockerPush(
//                        serverId: env.ARTIFACTORY_SERVER_ID,
//                        image: env.ARTIFACTORY_DOCKER_REGISTRY + '/onboard-talet-maven:' + env.BUILD_NUMBER,
//                        targetRepo: 'onboard-docker-repo-local'
//                )
//            }
//        }
        stage('Pubilsh Build Info') {
            steps {
                rtPublishBuildInfo (
                        serverId: env.ARTIFACTORY_SERVER_ID
                )
            }
        }
        stage('XRay Scan') { // XRAY
            steps {
                xrayScan (
                        serverId: env.ARTIFACTORY_SERVER_ID,
                        failBuild: false
                )
            }
        }
    }
}